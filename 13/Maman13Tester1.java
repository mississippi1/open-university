
public class Maman13Tester1 {
    
    public static void main(String[] args) {
        //
        // Author: Alon Barshay
        // This is a Tester for Maman 13, it will test 100 random pre-generated scenarios for each question.
        //
        
        System.out.println("\t///////////////////////");
        System.out.println("\t/// Tester Starting ///");
        System.out.println("\t///////////////////////");

        System.out.println("\t--------------------------------");
        System.out.println("\t----- Testing what method ------");
        System.out.println("\t--------------------------------");
        boolean answer1 = checkWhat();

        System.out.println("\n\n\t--------------------------------");
        System.out.println("\t-- Testing alternating method --");
        System.out.println("\t--------------------------------");
        boolean answer2 = checkAlternating();

        System.out.println("\n\n\t--------------------------------");
        System.out.println("\t----- Testing isWay method -----");
        System.out.println("\t--------------------------------");
        boolean answer3 = checkIsWay();

        System.out.println("\n\n\t--------------------------------");
        System.out.println("\t----- Testing prince method ----");
        System.out.println("\t--------------------------------");
        boolean answer4 = checkPrince();
        
        System.out.println(answer1 ? "\n\nwhat method looking good!" : "\n\nSomething is wrong with what method! See above ^");
        System.out.println(answer2 ? "alternating method looking good!" : "Something is wrong with alternating method! See above ^");
        System.out.println(answer3 ? "isWay method looking good!" : "Something is wrong with isWay method! See above ^");
        System.out.println(answer4 ? "prince method looking good!" : "Something is wrong with prince method! See above ^");
    }
    
    private static boolean checkWhat() {
        boolean foundSomething = false;
        for(int i = 0; i < whatArrays.length; i++) {
            int[] clone = new int[whatArrays[i].length];
            for(int j = 0; j<clone.length; j++)
                clone[j] = whatArrays[i][j];
            int result = Ex13.what(whatArrays[i]);
            if(result != whatResults[i]) {
                foundSomething = true;
                System.out.println("/////////////////////////////////////////////\nERROR!\nSomething wrong with the result of method what.\nThe array: ");
                printIntegerArray(clone);
                System.out.println("Result="+result+", but should be "+whatResults[i]);
                if(!compareArrays(whatArrays[i], clone)) {
                    System.out.println("Array also was changed, this might have affected results.\nNew array: ");
                    printIntegerArray(whatArrays[i]);
                }
                System.out.println("/////////////////////////////////////////////");
            }
        }
        return !foundSomething;
    }
    
    private static boolean checkAlternating() {
        boolean foundSomething = false;
        for(int i = 0; i < alternatingStrings.length; i++) {
            String orignalString = alternatingStrings[i];
            int result = Ex13.alternating(alternatingStrings[i]);
            if(result != alternatingResult[i]) {
                foundSomething = true;
                System.out.println("/////////////////////////////////////////////\nERROR!\n"
                        + "Something wrong with the result of method alternating.\nThe string="+orignalString+".\nResult="+result+", but should be "+alternatingResult[i]);
                System.out.println("/////////////////////////////////////////////");
            }
        }
            
        return !foundSomething;
    }

    private static boolean checkIsWay() {
        boolean foundSomething = false;
        for(int i = 0; i<isWayNumberArrays.length; i++) {
            int[] clone = new int[isWayNumberArrays[i].length];
            for(int j = 0; j<clone.length; j++)
                clone[j] = isWayNumberArrays[i][j];
            if(Ex13.isWay(isWayNumberArrays[i])!=isWayBoolArray[i]) {
                foundSomething=true;
                System.out.println("/////////////////////////////////////////////\nERROR!\nSomething wrong with the result of method isWay.\nOriginal Array:");
                printIntegerArray(clone);
                System.out.println("the result="+!isWayBoolArray[i]+", and should be "+isWayBoolArray[i]);
                if(!compareArrays(clone, isWayNumberArrays[i])) {
                    System.out.println("Array also was changed, this might have affected results.\nNew array: ");
                    printIntegerArray(isWayNumberArrays[i]);
                }
                System.out.println("/////////////////////////////////////////////\n");
            } else if(!compareArrays(clone, isWayNumberArrays[i])) {
                System.out.println("/////////////////////////////////////////////\nERROR!\nArray was changed, result is correct but array should stay the same.\nOriginal Array: ");
                printIntegerArray(clone);
                System.out.println("New array: "); 
                printIntegerArray(isWayNumberArrays[i]);
                foundSomething = true;
                System.out.println("/////////////////////////////////////////////\n");
            }
        }
        return !foundSomething;
    }

    private static boolean checkPrince() {
        boolean foundSomething = false;
        for(int k = 0; k < princeMaps.length; k++) {
            int[][] clone = new int[princeMaps[k].length][princeMaps[k][0].length];
            for(int i = 0; i<clone.length; i++)
                for(int j = 0; j<clone[i].length; j++)
                    clone[i][j] = princeMaps[k][i][j];
            int result = Ex13.prince(princeMaps[k], princeStartLocation[k][0], princeStartLocation[k][1]);
            if(result!=princeResults[k]) {
                foundSomething=true;
                System.out.println("/////////////////////////////////////////////\nERROR!\nSomething wrong with the result of method prince.\nOriginal Map:");
                for(int i = 0; i < clone.length; i++)
                    printIntegerArray(clone[i]);
                System.out.println("the result="+result+", and should be "+princeResults[k]+". start location:["+princeStartLocation[k][0]+"]["+princeStartLocation[k][1]+"]");
                boolean arrayChanged = false;
                for(int i = 0; i < princeMaps[k].length; i++) {
                    if(!compareArrays(clone[i], princeMaps[k][i])) {
                        arrayChanged = true;
                        break;
                    }
                }
                if(arrayChanged) {
                    System.out.println("Map also was changed, this might have affected results.\nNew Map: ");
                    for(int i = 0; i < princeMaps[k].length; i++)
                        printIntegerArray(princeMaps[k][i]);
                }
                System.out.println("/////////////////////////////////////////////\n");
            } else {
                boolean arrayChanged = false;
                for(int i = 0; i < princeMaps[k].length; i++) {
                    if(!compareArrays(clone[i], princeMaps[k][i])) {
                        arrayChanged = true;
                        break;
                    }
                }
                if(arrayChanged) {
                    System.out.println("/////////////////////////////////////////////\nERROR!\nMap was changed, result is correct but maps should stay the same.\nOriginal Map:");
                    for(int i = 0; i < clone.length; i++)
                        printIntegerArray(clone[i]);
                    System.out.println("New Map:");
                    for(int i = 0; i < princeMaps[k].length; i++)
                        printIntegerArray(princeMaps[k][i]);
                    System.out.println("/////////////////////////////////////////////\n");
                }
            }
        }
        return !foundSomething;
    }
    
    private static boolean compareArrays(int[] array1, int[] array2) {
        if(array1 == null || array2 == null || array1.length==0 || array2.length == 0 || array1.length!=array2.length)
            return false;
        for(int i = 0; i < array1.length; i++)
            if(array1[i]!=array2[i])
                return false;
        return true;
        
    }
    
    private static void printIntegerArray(int[] array) {
        if(array==null || array.length==0)
            return;
        System.out.print(array[0]);
        for(int i = 1; i<array.length; i++)
            System.out.print(", "+array[i]);
        System.out.println();
    }
    
    private static int[] princeResults = {2, 2, -1, -1, 5, 9, -1, -1, -1, 1,
            2, 7, -1, -1, 3, 3, 3, 3, 3, -1, 5,
            3, 10, -1, -1, -1, -1, -1, 7, -1, 3,
            1, -1, 4, -1, -1, -1, 2, -1, -1, -1,
            -1, -1, -1, 3, -1, -1, -1, -1, -1,
            -1, -1, -1, 1, 2, 2, -1, -1, 4, 2,
            -1, 1, 5, -1, -1, -1, 2, 2, -1, -1,
            -1, -1, 5, 2, -1, -1, 3, 1, 2, -1,
            2, 4, 2, 3, -1, 1, -1, 4, -1, 4, 3,
            4, 2, -1, 4, 6, 7, 2, -1, -1};
    
    private static int[][] princeStartLocation = {
            {0,0}, {0,3}, {6,3}, {0,0}, {1,2}, {0,1}, {0,4}, {4,1}, {0,2}, {4,6}, 
            {0,0}, {4,3}, {1,1}, {2,2}, {3,2}, {0,2}, {1,0}, {0,1}, {2,2}, {0,3}, 
            {4,3}, {0,5}, {0,8}, {6,0}, {2,4}, {1,1}, {3,5}, {1,0}, {0,4}, {4,0}, 
            {5,0}, {0,0}, {3,6}, {2,1}, {2,0}, {0,3}, {7,7}, {0,0}, {0,1}, {4,3}, 
            {1,2}, {3,1}, {1,2}, {5,1}, {0,8}, {9,0}, {4,2}, {2,2}, {2,2}, {1,0}, 
            {0,2}, {3,5}, {0,4}, {0,0}, {2,0}, {1,3}, {3,7}, {0,1}, {5,7}, {3,0}, 
            {0,1}, {0,3}, {1,4}, {0,2}, {6,0}, {3,1}, {3,3}, {1,2}, {2,2}, {0,1}, 
            {0,1}, {7,9}, {3,1}, {0,1}, {0,1}, {7,0}, {1,2}, {1,2}, {1,0}, {2,3}, 
            {2,1}, {2,0}, {0,4}, {0,6}, {5,3}, {1,0}, {0,0}, {0,0}, {0,0}, {0,2}, 
            {1,2}, {3,0}, {0,1}, {1,8}, {1,4}, {1,8}, {3,2}, {1,0}, {0,1}, {0,4}
    };
    
    private static int[][][] princeMaps = {{{1, -1, 4, 0, 3, 1, 5, 0}},

{{2, 6, -1, 6, 5, 4, 6, 3},
{2, 5, 4, 2, 1, 3, 6, 4},
{4, 6, 0, 2, 2, 1, 5, 5},
{5, 4, 3, 2, 0, 4, 2, 5}},

{{6, 4, 4, 4, 6, 4, 0, 3, 5, 0},
{2, 0, 1, 5, 5, 2, 4, 4, 5, 2},
{0, 6, 2, 5, 5, 6, -1, 6, 0, 6},
{2, 3, 4, 1, 1, 3, 2, 4, 6, 5},
{1, 3, 2, 1, 4, 3, 3, 2, 6, 6},
{5, 1, 3, 0, 0, 4, 5, 5, 4, 0},
{5, 6, 4, 6, 2, 2, 2, 5, 6, 1},
{4, 0, 0, 0, 3, 1, 4, 2, 4, 1},
{0, 1, 4, 6, 1, 3, 1, 1, 3, 0}},

{{4, 1, 6, 5, 3},
{4, 0, 6, 3, -1},
{5, 6, 2, 3, 4}},

{{5, 6, 1, 2, 0, 0},
{5, 0, 1, 0, 1, 4},
{0, 3, 2, 3, 4, 2},
{-1, 0, 2, 2, 3, 5}},

{{5, 3, 4, 3, 3, 6, 0, 1},
{6, 4, 3, 2, 5, 0, 5, 3},
{0, 0, 4, 1, 3, -1, 1, 1},
{2, 4, 6, 2, 1, 1, 2, 2},
{5, 5, 6, 6, 1, 4, 0, 1},
{3, 0, 0, 0, 5, 6, 4, 3},
{6, 0, 6, 2, 3, 0, 4, 1},
{0, 6, 1, 0, 4, 3, 6, 0}},

{{0, 0, 3, 5, 6},
{1, 4, 0, 1, 5},
{2, 1, 5, 4, 2},
{4, 6, 1, 6, 1},
{6, 2, 4, 0, 6},
{2, 6, -1, 4, 4},
{4, 2, 6, 2, 0}},

{{2, 1, 1, 5, 6},
{0, 3, 2, 4, 5},
{0, 2, 5, 6, -1},
{5, 5, 3, 2, 1},
{5, 0, 6, 5, 2},
{6, 5, 3, 2, 5},
{4, 4, 1, 6, 1}},

{{0, 3, 5, 0, 6, -1, 1, 2}},

{{6, 5, 3, 0, 5, 2, 0, 2, 2, 3},
{5, 6, 0, 4, 3, 1, 6, 2, 1, 5},
{1, 3, 3, 2, 6, 6, 1, 3, 2, 0},
{0, 2, 0, 4, 6, 4, 4, 1, 6, 5},
{0, 5, 3, 0, 4, 5, -1, 2, 4, 4},
{1, 3, 4, 5, 0, 2, 4, 3, 5, 3}},

{{2, -1, 5, 6, 2, 5, 0, 6, 3}},

{{3, 4, 0, 4, 1, 2, 6, 0},
{0, 0, 3, 4, 6, 6, 2, 0},
{6, 4, 0, 4, 1, 1, 3, 1},
{3, 5, 5, 6, 2, 5, 1, 5},
{3, 6, 4, 5, 2, 5, 6, 0},
{-1, 0, 5, 3, 1, 2, 6, 3},
{4, 6, 1, 1, 6, 6, 2, 0},
{3, 5, 4, 5, 4, 6, 1, 6},
{2, 2, 1, 6, 0, 6, 4, 5}},

{{0, 5, 4},
{1, 6, 1},
{3, 0, 4},
{0, 1, 2},
{0, 3, -1},
{0, 0, 5}},

{{0, 1, 3, 0, 5},
{-1, 2, 6, 3, 3},
{3, 0, 0, 3, 5},
{4, 5, 6, 4, 5}},

{{2, 2, 6, 6, 4, 6, 2, 3},
{2, 1, 5, 2, 6, 4, 4, 2},
{1, 4, 2, -1, 1, 1, 5, 6},
{6, 5, 2, 1, 4, 2, 1, 2}},

{{2, 0, 3, 1, -1, 6}},

{{4, -1},
{4, 4}},

{{5, 3, 1, 1},
{-1, 2, 4, 5}},

{{1, 2, 5, 4, 3},
{6, -1, 6, 6, 5},
{0, 1, 5, 5, 2},
{2, 3, 1, 0, 3},
{5, 5, 5, 0, 1},
{3, 5, 4, 5, 2},
{1, 0, 3, 0, 0},
{0, 6, 2, 6, 5},
{4, 1, 4, 4, 6}},

{{-1, 2, 4, 1}},

{{1, 0, 4, 4, 3, 2, 1, 0, 6},
{4, 5, 5, 6, 2, 3, 2, 6, 3},
{3, 0, 4, 4, 6, -1, 5, 1, 2},
{1, 4, 2, 4, 6, 4, 3, 3, 0},
{2, 1, 6, 6, 5, 1, 3, 3, 6}},

{{0, 5, 4, 6, 2, 5, 6, -1}},

{{2, 6, 6, 2, 0, 3, 1, 2, 5, 4},
{3, 0, 3, 0, 6, 2, 1, 4, 3, 0},
{5, 0, 4, 0, 5, 1, 3, 1, 1, 6},
{1, 2, 3, 5, 6, 0, 1, 4, 2, 2},
{0, 0, 2, 1, 4, -1, 3, 5, 1, 6},
{2, 0, 5, 4, 3, 3, 0, 1, 1, 5},
{2, 5, 1, 6, 2, 2, 2, 0, 6, 3},
{3, 1, 1, 0, 3, 1, 2, 5, 4, 4}},

{{5, 2, 0, 1, 4, 0},
{2, 5, 5, 4, 2, 5},
{2, 1, 2, 0, 5, 0},
{6, 0, 2, 5, 1, 6},
{6, 0, 0, -1, 1, 4},
{6, 1, 0, 4, 5, 3},
{4, 5, 3, 1, 1, 0},
{6, 2, 0, 6, 0, 4}},

{{6, 5, 2, 6, 1, 6, 5, 3},
{1, 1, 3, 6, 0, 1, 5, 1},
{3, 1, 0, 6, 3, 4, 6, -1},
{2, 2, 1, 2, 0, 2, 2, 6}},

{{0, 0},
{4, 2},
{3, 5},
{1, 0},
{4, 3},
{6, 2},
{3, 2},
{2, 6},
{4, 2},
{-1, 6}},

{{3, 5, 0, 6, 4, 2, 1},
{3, 4, 4, 5, 6, 2, 6},
{3, 0, 0, 6, 6, 5, -1},
{3, 5, 4, 4, 5, 0, 3},
{0, 3, 6, 1, 5, 0, 1},
{2, 0, 4, 3, 1, 1, 1}},

{{5, 1},
{4, 0},
{2, 6},
{4, 2},
{4, 1},
{3, 3},
{-1, 0},
{5, 6}},

{{1, 3, 0, 5, 6},
{0, 6, 3, 4, 0},
{4, 2, 1, 2, 2},
{1, -1, 1, 2, 4},
{4, 1, 3, 1, 0},
{3, 5, 1, 2, 0},
{0, 1, 2, 1, 6},
{4, 4, 5, 1, 3},
{6, 5, 1, 6, 4}},

{{4, 2, 3},
{3, 6, 5},
{6, 3, -1},
{3, 5, 6},
{4, 6, 5},
{3, 1, 0},
{3, 0, 2},
{2, 6, 4},
{0, 1, 0}},

{{2, 0},
{5, 4},
{3, 3},
{0, 5},
{4, 4},
{4, 3},
{5, -1}},

{{-1, 2}},

{{6, 0, 5, 5, 4, 5, 5},
{4, 1, 5, 1, 2, 3, 0},
{4, 3, 4, 5, 3, 2, 0},
{0, 3, 3, 5, 6, 3, 1},
{4, 3, -1, 4, 2, 6, 1},
{0, 6, 5, 0, 4, 3, 2},
{2, 6, 5, 2, 2, 2, 3},
{3, 6, 6, 0, 1, 5, 2},
{4, 1, 2, 1, 5, 1, 2}},

{{2, 5, 5, 6, 3, 4},
{1, 3, 1, 2, 5, 6},
{4, 3, 5, 3, 3, 2},
{0, 2, 0, -1, 5, 0},
{2, 2, 2, 5, 0, 5}},

{{2, -1},
{6, 3},
{0, 4},
{4, 3},
{1, 2}},

{{0, 1, 0, 3, 5, 1, 3, 6},
{2, 6, 1, 4, 5, 2, -1, 4}},

{{0, 4, 0, 5, 5, 5, 3, 4, 6, 5},
{5, 5, 4, 5, 6, 4, 6, 3, 0, 3},
{0, 0, 3, 2, 1, 4, 0, 6, 4, 2},
{5, 4, 2, 1, 6, 1, 1, 6, 3, 2},
{2, 2, 3, 3, 3, 3, 0, 5, 3, 6},
{6, 1, 2, 5, 6, 6, 4, 2, 5, 2},
{6, -1, 6, 0, 4, 4, 0, 2, 4, 4},
{4, 3, 3, 1, 2, 6, 0, 6, 5, 0},
{2, 6, 1, 5, 5, 1, 1, 5, 0, 6}},

{{0, 0, 3, 3},
{-1, 4, 0, 2},
{1, 4, 4, 4},
{6, 3, 2, 3},
{2, 4, 0, 5}},

{{1, 0, 1, 3, 0},
{5, 3, 1, 1, 5},
{-1, 2, 6, 2, 3},
{1, 6, 6, 0, 5}},

{{4, 1, 3, 1, 0, 2, 0, 0, 4, 2},
{5, 5, 3, 6, 2, 3, 3, 3, 6, 1},
{5, 4, 5, 3, 5, 4, 0, 6, -1, 6},
{3, 4, 6, 5, 4, 6, 4, 2, 5, 4},
{5, 2, 2, 3, 0, 6, 5, 3, 6, 3},
{4, 6, 5, 5, 5, 2, 0, 5, 3, 5}},

{{4, 3, 6},
{0, 4, 4},
{1, 3, 1},
{5, 1, 0},
{6, 0, 0},
{-1, 4, 3},
{2, 5, 4},
{4, 4, 4}},

{{5, 2, 3, 3, 6, 3, 3, -1, 1},
{4, 3, 3, 2, 4, 2, 1, 4, 6},
{2, 4, 3, 1, 1, 5, 3, 3, 2},
{6, 5, 5, 1, 6, 2, 6, 1, 4}},

{{5, 5, 5, 2},
{3, 2, 5, 5},
{2, 4, 0, 3},
{4, 5, 0, 6},
{6, -1, 1, 0},
{6, 3, 0, 2}},

{{4, 3, 0},
{5, 2, 6},
{-1, 6, 0},
{0, 3, 6},
{6, 4, 3},
{0, 0, 2},
{3, 5, 4},
{1, 5, 6}},

{{1, 2, 3, 6, 1, 6, 1, 4, 3},
{1, 6, 3, 3, 2, 3, 2, -1, 6}},

{{1, 3, 2, 0},
{3, 6, 4, 6},
{0, -1, 0, 3},
{0, 5, 4, 2},
{5, 2, 6, 0},
{6, 2, 5, 1},
{4, 2, 4, 1},
{3, 4, 2, 6},
{0, 2, 4, 6},
{3, 3, 3, 1}},

{{5, 6, -1},
{0, 1, 5},
{4, 1, 3},
{3, 6, 0},
{5, 2, 5},
{1, 1, 2},
{5, 1, 5},
{0, 4, 2}},

{{6, 6, 0, 2, 0, 1, 5, 3},
{1, 4, 5, 0, 0, 6, 2, 3},
{3, 1, 1, 3, 2, 6, 2, 6},
{0, 3, 0, 2, 2, 5, -1, 1}},

{{0, 0, 6, 4},
{1, 1, 0, 2},
{3, 0, 4, 1},
{-1, 2, 5, 0},
{4, 3, 6, 2}},

{{6, 1, 6, 5, 3},
{5, 1, 4, -1, 0},
{0, 2, 6, 2, 0},
{6, 0, 5, 4, 0},
{3, 2, 4, 5, 1},
{4, 2, 4, 1, 1},
{5, 1, 5, 0, 3}},

{{5, 2, 1, 0, 4, 0, 6},
{5, 0, 0, 5, 3, 2, 5},
{1, 1, 2, 1, 6, 4, 5},
{3, 3, 0, 1, 5, 3, 1},
{1, 4, 4, 4, 5, 5, 6},
{1, 1, 6, -1, 6, 6, 2},
{1, 4, 4, 3, 4, 1, 0}},

{{-1, 5, 3, 4, 1, 2, 5, 5},
{3, 5, 4, 0, 4, 5, 2, 2},
{5, 2, 2, 1, 0, 0, 2, 4},
{4, 5, 0, 4, 6, 0, 6, 1},
{1, 3, 1, 3, 0, 0, 5, 5},
{5, 5, 0, 5, 4, 6, 4, 4},
{1, 6, 4, 1, 4, 2, 2, 4},
{6, 2, 0, 6, 5, 4, 6, 4},
{2, 6, 6, 4, 5, 4, 3, 2},
{3, 2, 4, 1, 4, 4, 0, 3}},

{{1, 2, 2, 3, 4, 5, 0},
{0, 5, 3, 0, 1, 5, 1},
{6, 2, 1, 5, 5, 2, 6},
{2, 4, 6, 2, 0, 6, 4},
{5, 2, 0, 5, 5, -1, 1}},

{{-1, 1}},

{{0},
{2},
{6},
{-1},
{0}},

{{2, 4, 3, -1, 0},
{4, 4, 5, 2, 3},
{5, 2, 1, 0, 5},
{0, 4, 5, 6, 0},
{5, 6, 5, 1, 3}},

{{2, 1, 5, 6, 4, 3, 0, 4, 6},
{1, 2, 6, 6, 6, 3, 5, 3, 1},
{2, 0, 1, 3, 0, 4, 1, 4, 2},
{0, 3, 3, 4, 1, 6, 6, 4, 3},
{0, 5, 3, 2, 2, 4, 1, 1, 0},
{3, 4, 1, 0, 6, 2, 1, 5, 4},
{2, 1, 2, 2, 5, 5, 3, 5, 6},
{4, 0, 5, 1, -1, 0, 1, 4, 5}},

{{1, 4, 3, 3, 0, 2},
{0, 3, 6, 5, -1, 6},
{3, 5, 2, 6, 1, 2},
{4, 6, 5, 3, 4, 4},
{3, 3, 5, 4, 3, 2},
{4, 0, 2, 0, 0, 5}},

{{6, 0, 4, 1, 4, 4, 4, 4, 2},
{3, 2, 4, 3, 3, 3, 6, 5, 6},
{5, 4, 1, 3, 2, 4, 2, -1, 0},
{4, 4, 3, 0, 5, 4, 3, 3, 3},
{0, 4, 0, 2, 5, 6, 1, 3, 5},
{5, 2, 0, 6, 6, 5, 6, 2, 5},
{5, 6, 3, 5, 6, 0, 4, 1, 2},
{6, 5, 6, 3, 5, 5, 1, 1, 6}},

{{4, 4},
{6, 5},
{4, 6},
{1, 5},
{-1, 3},
{5, 4}},

{{2, 1, 0, 6, 1, 5},
{3, 5, 5, 3, 0, 0},
{5, 6, 3, 4, 5, -1}},

{{5, 3, 6, -1},
{6, 4, 0, 4}},

{{5, 4, 3, 4, 2},
{4, 4, 4, 3, 2},
{4, -1, 2, 4, 1}},

{{-1, 6, 3}},

{{0},
{0},
{2},
{3},
{-1},
{4},
{1}},

{{2, -1, 5},
{3, 4, 0},
{5, 2, 0},
{3, 1, 1}},

{{0, 5, 6, 0, 4},
{0, 0, 3, 2, 0},
{6, 4, 5, -1, 0},
{5, 5, 6, 1, 4},
{6, 3, 1, 2, 4},
{0, 5, 3, 1, 4},
{1, 5, 2, 5, 6}},

{{2, 3, 1, 5, 6, 5, 1, 3, 3, 1},
{0, -1, 0, 5, 5, 2, 4, 2, 0, 0},
{4, 3, 6, 3, 6, 1, 3, 1, 2, 3}},

{{2, 4, 1},
{5, 4, 5},
{5, 4, 2},
{6, 6, 0},
{0, 2, 6},
{-1, 0, 2},
{6, 5, 4},
{6, 4, 6},
{1, 4, 6}},

{{0, 4, 6, 3, 4},
{6, 2, 0, 6, -1},
{3, 0, 5, 1, 2}},

{{3, 6},
{3, 2},
{5, -1},
{6, 5},
{5, 2},
{5, 3}},

{{3, 6, 2, 5, -1, 5, 0, 3, 3, 5},
{6, 6, 1, 0, 0, 4, 4, 1, 0, 5},
{5, 1, 3, 5, 4, 6, 0, 3, 5, 4},
{3, 0, 1, 5, 2, 1, 1, 6, 3, 5},
{0, 1, 6, 1, 6, 1, 0, 2, 6, 5},
{2, 3, 3, 0, 1, 4, 1, 3, 4, 1},
{6, 0, 3, 5, 4, 2, 3, 3, 1, 4},
{4, 1, 5, 5, 2, 3, 3, 6, 4, 3}},

{{-1, 4},
{3, 6},
{2, 3},
{6, 2}},

{{-1, 0}},

{{2, 1},
{4, 5},
{1, -1},
{0, 3}},

{{0},
{5},
{0},
{4},
{-1},
{6},
{3},
{3},
{2},
{3}},

{{3, 5, 5, 2},
{6, 6, 4, 1},
{2, 2, 5, 2},
{6, 0, -1, 5},
{6, 3, 5, 1}},

{{1, 0, 1, 3},
{6, 3, -1, 4},
{4, 2, 2, 5}},

{{2},
{2},
{-1}},

{{4, 0, 3, 3},
{2, 3, 6, 2},
{5, 6, 2, 5},
{2, 4, 2, 1},
{1, -1, 2, 5}},

{{5, 3, 6},
{2, 0, 2},
{-1, 0, 5},
{4, 0, 5}},

{{4, -1},
{1, 1},
{0, 0}},

{{3, 5, 1, 6, 4, -1, 6},
{1, 3, 6, 6, 6, 4, 4},
{6, 3, 6, 0, 6, 2, 3}},

{{0, 6, 2, 2, 1, 3, 1, 2, -1, 5},
{4, 3, 6, 0, 3, 4, 1, 6, 3, 0}},

{{2, 5, 6, 3},
{4, 1, 6, 4},
{2, 2, 4, 6},
{2, -1, 6, 4},
{3, 4, 5, 0},
{6, 3, 0, 4},
{1, 2, 5, 3},
{4, 0, 6, 0}},

{{5, 0, 4, 2, 0},
{-1, 3, 2, 1, 5}},

{{6, 1, -1, 0, 3, 5, 5, 0, 2}},

{{3, 5, 2},
{3, 2, -1}},

{{6, 1, 2, 5, 0, 0, -1, 3, 1, 4},
{1, 1, 1, 0, 6, 2, 5, 2, 4, 1},
{0, 2, 2, 1, 3, 4, 6, 6, 6, 2},
{5, 2, 5, 4, 6, 1, 2, 5, 4, 5},
{6, 3, 4, 1, 6, 3, 6, 0, 1, 5},
{3, 1, 3, 2, 2, 2, 1, 0, 3, 6},
{0, 1, 1, 4, 4, 6, 5, 2, 4, 3}},

{{5, 5, 3, 1, 2},
{3, 6, 1, 6, -1}},

{{3, -1, 5, 4, 1, 5},
{6, 0, 4, 4, 2, 4},
{6, 2, 1, 2, 1, 1},
{2, 0, 6, 1, 5, 1},
{4, 0, 5, 0, 1, 3}},

{{-1, 4, 5, 6, 4, 5, 4, 1, 0, 1},
{1, 0, 4, 6, 6, 4, 4, 1, 2, 6},
{3, 0, 6, 4, 6, 4, 0, 3, 3, 2},
{3, 0, 4, 0, 4, 6, 3, 6, 1, 1}},

{{-1, 5},
{4, 4}},

{{0, 1, 0, 5, 6, 5, 0, 4, 0},
{3, 3, 0, 2, 5, 3, 1, 5, 1},
{-1, 3, 4, 5, 2, 0, 2, 4, 2},
{6, 3, 0, 4, 1, 2, 4, 2, 4},
{0, 1, 0, 3, 5, 6, 1, 3, 2}},

{{2, 1, 0, 0, 6, 2},
{4, 2, 3, 6, 5, 3},
{4, 0, 2, 0, 4, 3},
{0, 1, 1, 5, 5, -1},
{4, 2, 5, 5, 3, 0},
{4, 0, 2, 5, 1, 0},
{2, 6, 3, 0, 6, 6}},

{{5, 1, 5, 4, 2, 3, 6, 2, 2, 3},
{0, 6, 6, 6, 3, 6, 1, 6, 4, 5},
{2, 4, 4, 0, 5, 2, 1, 3, 3, 0},
{3, 5, 6, 3, 4, 0, 1, 5, 3, 1},
{4, 2, 1, 0, 5, 1, 1, 4, 5, 1},
{6, 6, 6, 6, 6, 6, 2, 2, 0, -1},
{4, 0, 1, 2, 5, 1, 5, 3, 1, 4},
{1, 2, 6, 2, 5, 6, 2, 0, 2, 6},
{5, 0, 0, 6, 3, 4, 0, 2, 3, 4}},

{{3, 3, 5, 0, 1, 3, 6, 4, 0},
{0, 3, 0, 5, 3, 1, 5, 0, 3},
{4, 6, 1, 3, 1, 0, 0, 3, 0},
{3, 3, 3, 2, 4, 1, -1, 4, 0}},

{{0, 6},
{2, -1},
{6, 0},
{0, 1}},

{{5, 2, 5},
{4, 1, 5},
{2, 2, 0},
{5, 2, 5},
{6, 4, 2},
{2, 2, 0},
{4, 3, 6},
{1, -1, 1},
{5, 1, 3},
{0, 3, 3}},

{{3, 5, 4, 5, 1, 4, 2, 3, 5, 3},
{0, 2, 4, 5, 4, 0, 3, 2, 3, 1},
{1, -1, 2, 4, 6, 2, 6, 0, 5, 1},
{1, 3, 6, 2, 2, 6, 4, 3, 6, 5}}};
    
    private static int[] whatResults = {2, 3, 5, 8, 3, 3, 4, 2, 5, 4, 
            5, 5, 2, 1, 10, 9, 5, 9, 2, 3, 
            1, 6, 3, 0, 6, 6, 4, 7, 7, 5, 
            6, 0, 2, 8, 10, 1, 4, 4, 3, 1, 
            3, 3, 10, 5, 8, 6, 2, 9, 5, 2, 
            9, 6, 4, 3, 10, 6, 4, 9, 3, 0, 
            2, 6, 8, 3, 8, 4, 7, 5, 3, 3, 
            4, 6, 9, 8, 1, 7, 6, 4, 5, 4, 
            10, 4, 8, 3, 5, 7, 5, 5, 2, 9, 
            5, 7, 9, 2, 1, 3, 7, 2, 8, 6};
    
    private static int[][] whatArrays = {{48, -59, -48, -88},
            {-57, -5, -47, -20},
            {36, -89, -61, -96, -12, 15, 14},
            {15, 74, 35, -63, 60, 63, 16, 62},
            {-5, 66, 10, 80},
            {40, 93, 41},
            {-87, 39, -6, 8},
            {87, 76, 0},
            {58, -79, -27, 32, 36, -37},
            {-43, -41, -46, -83, -38},
            {-84, -56, -85, -76, 83, -85, 44},
            {-50, -65, 77, 88, 34},
            {66, 64, -15},
            {28},
            {-97, 92, -19, -12, -21, -15, 32, 97, 25, -26},
            {47, -79, 15, 79, 26, -89, 51, -96, -24},
            {39, -63, 23, -67, 96},
            {-72, 67, 83, 5, 46, -50, 42, -37, 4},
            {80, 50},
            {-49, 69, -78},
            {18, 53},
            {-98, -24, 21, 86, -5, 80, 95},
            {46, 77, 39},
            {9},
            {-4, -46, 48, 52, -83, 43},
            {-86, -1, 22, -44, 72, -62, 8, -98},
            {53, -77, -60, -83, -92},
            {41, -12, 60, 26, 63, -66, -66},
            {82, 72, -7, 65, -35, 1, -32, 59, 56, 64},
            {-31, -57, -89, -23, -40},
            {-19, 10, -91, -10, -79, -76, -2},
            {95},
            {77, 21, 37},
            {59, -100, -41, -87, 2, 69, 90, 83, 18},
            {30, -45, -81, 24, 48, -80, -24, 98, 61, 73},
            {72, -55},
            {-63, 12, 85, 99, -66},
            {82, -49, -19, -14, -47},
            {9, 90, -97},
            {78, -35, 86},
            {-57, -67, -94},
            {49, 36, -87},
            {83, 32, 93, 69, 33, -45, 1, -5, 83, -96},
            {-2, -59, -29, 66, 82, 13},
            {23, 6, 70, 0, -6, -20, 0, -69},
            {28, -42, -45, 53, 12, 49, 0, -56, 74},
            {-51, -99},
            {-80, -98, -93, 74, 70, -26, -95, -6, 14, 65},
            {85, -7, -72, -77, -20, -72},
            {52, 16, -17},
            {70, -13, -57, 16, -4, 8, -62, -79, -5, 63},
            {76, 57, 51, -25, 56, -39, -21},
            {-47, -22, -93, -6},
            {83, -11, -4},
            {59, 85, 95, 53, -76, 15, 36, -55, -91, 89},
            {28, -55, -11, 37, -10, 21},
            {-40, 25, 69, 32, -43, 90},
            {2, 85, -90, 90, -83, 44, -46, 79, -77, 83},
            {56, 31, -27},
            {-79},
            {-54, 99, -20, 44},
            {49, 67, -41, 38, 84, 23},
            {-21, 38, -100, -10, 33, 51, -8, 82, 96},
            {48, 22, -100},
            {-31, 25, -74, -66, -50, 95, 18, -22, 76},
            {-32, 88, -70, -17, -56, -66, -96, -22},
            {-57, -61, 47, 68, 81, -38, 40},
            {26, 30, 5, -47, 13, 44, -6, -56},
            {-27, -25, 2},
            {-28, 55, 69},
            {-4, 26, 46, 54, 11},
            {-45, 64, -27, -20, -49, 94, 88},
            {48, -68, 33, 8, -70, -63, 81, 85, 2},
            {-97, -61, -97, -26, -51, -67, -59, -36},
            {62, -11},
            {-100, -96, 42, -43, 32, 63, -32},
            {-25, 96, -98, 84, 30, -3, 5},
            {-86, 49, -96, 1, -3, 0},
            {-72, 26, -92, -78, -44},
            {44, -28, -80, 88, 81, 10},
            {-87, -4, 79, -84, 70, -16, 34, 97, -3, -2},
            {-21, -81, 67, 79},
            {-78, -61, 23, -38, -11, -18, 46, 41},
            {-94, 24, -84, 85, 6},
            {39, 88, 76, -89, 28, -37},
            {-92, 29, 13, -30, 14, -59, -100, 54, -60},
            {30, 41, 43, 71, -97},
            {64, 8, 47, 24, -95, 71},
            {-78, -38},
            {51, 3, -82, 21, -64, -93, 69, 66, -69, -77},
            {7, 2, 77, 57, -69, 49},
            {-64, 19, -90, -3, 69, 88, -1, 87, -28},
            {71, 86, -85, 65, 50, -98, -61, 34, -100},
            {-49, 33, -73},
            {54, -75},
            {21, -45, 82},
            {1, -38, 45, 64, 84, -67, -97},
            {-78, -18},
            {38, 56, 16, -94, -47, -30, -13, 66, -77},
            {55, -64, 27, -66, -97, -3, 89}};
    
    private static String[] alternatingStrings = {
            "0110",
            "011010001011011110110000111000",
            "111010100000110101",
            "001011",
            "10001010010111",
            "100011000110100010101011101111010100",
            "0101001110011001",
            "00011001011101100011",
            "01111100010001001110",
            "0001111111101000101011100010010100",
            "1011110101010101001001100110000111011111001000011100100010",
            "1111000001",
            "0010111110000011",
            "110001",
            "100110100111010001101100110100110110011000",
            "0101011001",
            "1110110111110010001101000101010001010101110011101001010000",
            "0000011100001110101100111101",
            "110011010110110011011100011000001100",
            "11000111100011000000011111111000",
            "11010101110010110000",
            "1001010110101001001100111000000111111100000111001011",
            "10111001000101000111",
            "00110001010111001000010001100110111111",
            "110010",
            "0100100101101110010000111110100100110011",
            "000100011111011101010000101100000011010101101011111100",
            "1001101001011100111010001010",
            "10",
            "11000101001110",
            "1011000011001100100011111001",
            "11000000110110010100001001111010111001001111",
            "110010011110100010001000111101101110011000",
            "10010010100101100111",
            "1011011100100110011000001001011101111000101001101100",
            "01100011101100100101011100010110001011000111",
            "100101",
            "010110",
            "10100101",
            "101100101101011011001111110011100001101001001100001010100010",
            "011001011000110010000101011010011101010111",
            "101110010101010101100001",
            "000111",
            "0101",
            "00100010101110101001110110000001110111",
            "1111010100010001010011",
            "0110000111",
            "01010000111010001111",
            "0011001001001011011011111110001001100010100011001110",
            "11011001001010010000111100101011",
            "11101111000000",
            "010111001001001011110100101000100001011111000001111101",
            "11000101001100100110010111010100100111",
            "010010101000001001001000101001100111111000111111010100110111",
            "100001111101011110001000000111",
            "0110011010000011110101",
            "00000100011000001111100101111110100111",
            "1000101110111000000111100001011101",
            "000101100011111001010100000111110011110001",
            "0100110010110110101001011010000110110101100110",
            "0010010010101100101011100010011100101101110101011100",
            "11100010011111010100110011101001010000011110100010",
            "001101110100100010101010011001101011101100001011",
            "11001110110001000100111001",
            "10",
            "010110111101000100110001110100101110001110001001",
            "1100",
            "0100100111100111111101110100011101000011101000100000011010",
            "111010100010000000011001011101110111011010101010",
            "110010",
            "01001011",
            "0110",
            "110110011101100111000110011011110110110001001100100010000100",
            "111111010001000110011100100000001111110110001010110110100001",
            "010001100111110000111001111101100101000001",
            "001100111100110100101001010010111010000110111110000000111110",
            "1101011000010100111010010011",
            "0100101100101110111001110110000000001111011010011010100011",
            "00100100110010001101101101011001010111",
            "01101010110100100011100110110100",
            "001111101000010010111111001001001001011010000010110111110010",
            "10010010111100001101",
            "1100110011110011000001",
            "010101111011111110100001111001001000000100001110110000100111",
            "01010011110101101000",
            "1001001101",
            "0011101101010001000100100011111100001111100110",
            "00011110",
            "01",
            "01011110101000",
            "0010001101010110101011",
            "001011",
            "0011001010011100100110001100010000101111101011110110",
            "010101001010001111000101101110",
            "1011011011101000010111000001",
            "00001011001101001011010111",
            "11100100100011",
            "10",
            "111111010001110101100000000010001110101001101010110101",
            "110011001101011001100101000101"    
    };
    
    private static int[] alternatingResult = {1, 6, 4, 1, 3, 7, 3, 4, 4, 7, 
            13, 2, 3, 1, 10, 1, 11, 7, 8, 8, 
            4, 13, 4, 8, 1, 10, 11, 5, 0, 3, 
            6, 11, 8, 5, 12, 10, 1, 1, 2, 12, 
            8, 4, 1, 0, 8, 3, 2, 5, 10, 7, 
            3, 12, 7, 14, 7, 5, 9, 8, 8, 11, 
            12, 12, 9, 6, 0, 11, 1, 14, 10, 1, 
            2, 1, 14, 15, 8, 13, 6, 12, 8, 7, 
            13, 5, 5, 15, 4, 2, 11, 2, 0, 3, 
            5, 1, 11, 7, 7, 6, 3, 0, 13, 5};
    
    private static boolean[] isWayBoolArray = {false, true, true, false, false, false, true, false, true, false, false
            , false, true, true, true, true, false, false, true, false, true
            , true, false, false, true, true, true, true, true, false, false
            , true, true, false, false, false, true, true, false, false, true
            , false, false, false, false, true, false, false, false, false, true
            , false, true, false, false, false, false, true, false, true, true
            , true, false, true, false, true, true, true, true, true, false
            , true, false, false, false, true, true, false, true, true, true
            , true, false, false, true, true, true, true, false, false, false
            , true, true, true, false, false, false, true, true, false};
    
    private static int[][] isWayNumberArrays = {{1, 2, 0, 1, 1, 4, 1, 5, 0, 3, 0, 4, 3, 1}, 
            {4, 5, 1, 4, 4, 0, 0, 1, 5, 5, 1, 4, 3, 2, 3, 5, 4, 2}, 
            {5, 2, 3, 5, 4, 4, 2, 3, 5}, 
            {4, 2}, 
            {3, 2, 5, 0, 5, 4, 4, 1}, 
            {3, 4, 0, 4, 5, 3, 4, 4, 3, 0, 4, 3, 2, 1}, 
            {3, 5, 3, 1, 3, 2, 4, 2, 2, 0, 2, 5, 1, 1, 4, 5, 5}, 
            {4, 5, 2}, 
            {0}, 
            {2, 5, 2, 2, 5, 5, 2, 2, 3, 1, 1, 4, 0, 5}, 
            {0, 5, 0, 4, 2, 5, 3, 3, 3, 1, 2, 5, 3, 0, 4, 3}, 
            {3, 3, 3, 5, 3, 1, 4}, 
            {4, 1, 5, 2, 5, 3, 2, 1, 2, 0}, 
            {3, 2, 0, 4}, 
            {5, 2, 5, 3, 4, 3, 1, 3, 0}, 
            {1, 5, 5, 5, 2, 1, 2, 5, 4, 5, 5, 4, 3, 5, 0, 5}, 
            {3, 1, 2, 1, 4, 5, 5, 5, 0, 2, 4, 3, 1, 5, 1}, 
            {5, 1, 5, 3, 2, 5, 0, 4, 5, 3, 5, 1, 2, 3}, 
            {1, 2, 5, 5, 0, 4, 5, 1, 2, 0, 5, 3, 1, 4, 0, 3, 1, 2, 2, 5}, 
            {3, 5, 0, 3, 4, 1, 1, 3, 4, 5, 2, 5, 0, 3, 0, 4, 1, 2, 0, 0}, 
            {5, 1, 3, 5, 2, 1, 0}, 
            {5, 5, 5, 5, 4, 0}, 
            {3, 0, 4, 0, 0, 2}, 
            {3, 1, 1, 1, 2, 4, 4, 2, 4, 1}, 
            {4, 1, 1, 2, 1, 2, 1, 5, 5, 5, 5, 1, 3, 0, 1, 3}, 
            {2, 3, 1, 3, 2, 0, 4, 5, 4, 5, 1, 1}, 
            {3, 4, 4, 1, 0, 5, 5}, 
            {5, 1, 4, 3, 5, 3, 4, 4, 4, 3, 2, 1, 4, 5, 1, 5, 1, 3}, 
            {4, 3, 5, 0, 2}, 
            {2, 4, 4, 0, 2, 4, 2, 4}, 
            {2, 1, 4, 5, 3}, 
            {2}, 
            {1, 3}, 
            {0, 2, 1, 1, 5, 0, 2}, 
            {2, 3, 0, 1, 0, 5, 1, 2, 0, 3, 4, 2, 4, 0}, 
            {1, 2, 0, 4, 5, 0, 0, 5, 5, 3, 4, 3, 5, 2, 2}, 
            {2, 3, 4, 3, 0, 3, 3, 4, 0, 4, 5, 0, 4, 1, 1}, 
            {3}, 
            {0, 4, 5}, 
            {0, 4, 1, 3, 2, 2}, 
            {1, 3, 0, 1, 4}, 
            {1, 3, 5, 0, 2, 4, 3, 3, 3, 5, 0, 0, 0, 4, 0, 1}, 
            {4, 1, 1, 2}, 
            {0, 4}, 
            {0, 5, 0, 5, 0, 3, 3}, 
            {4}, 
            {2, 3, 5, 4, 5, 4, 5, 3, 2, 3, 2, 1, 5, 0, 0, 4, 4, 0, 3, 3}, 
            {0, 4, 1, 5, 4, 3}, 
            {0, 0}, 
            {5, 2, 1, 1, 1, 0, 2, 4, 5, 5, 0, 0, 1, 2}, 
            {3, 4, 3, 5, 2, 5, 2, 0, 3}, 
            {3, 4, 2, 4, 3, 0}, 
            {4, 5, 2, 5, 1, 3, 2, 0, 2, 5, 1, 4, 4, 1, 4, 4}, 
            {1, 5, 0, 3, 5, 2, 4, 4, 3, 4, 0, 3, 2}, 
            {5, 5, 1}, 
            {0, 1, 1, 5, 3, 1, 3, 2, 1, 0, 3, 5, 5, 5, 1, 2}, 
            {4, 0, 4, 0, 3, 5, 4, 0, 0, 2, 0, 3, 1, 5, 0, 3, 3, 4, 4}, 
            {1, 4}, 
            {0, 5, 3}, 
            {2, 1, 1, 1, 2, 4, 3, 4, 0, 4}, 
            {1, 3, 0, 5, 1, 1}, 
            {3, 4, 0, 5, 0, 3, 0, 1, 3, 2, 4, 3}, 
            {4, 2, 5, 0, 4, 1, 2, 3, 0, 0, 5, 4}, 
            {2, 3, 0}, 
            {5, 3, 3, 2, 3, 1, 1, 2, 5, 0, 5, 1, 1, 3, 0, 4, 0, 3, 2, 4}, 
            {4, 2, 4, 0, 5, 3, 5, 0, 1, 2, 5, 2, 1, 3, 3, 3, 5}, 
            {3, 3, 1, 4, 0, 1, 4, 2}, 
            {1}, 
            {2, 5, 2, 2, 4, 1, 3, 4, 5, 3, 1, 3, 4, 2}, 
            {2}, 
            {0, 5, 3, 2, 5, 5, 1, 1, 0, 2, 5, 5, 3, 5, 0, 5, 2}, 
            {1, 2, 5, 1, 0, 3, 0, 1, 5, 3, 3, 5, 2, 5}, 
            {3, 4, 1, 4, 0, 0, 4, 5, 5, 4, 3, 0, 1, 2, 0, 2, 1, 1, 4, 5}, 
            {2, 0, 0, 4, 5, 5, 0, 3, 0, 4, 1, 4, 3, 5, 2, 5}, 
            {0, 2, 5, 5, 1, 4, 0}, 
            {2, 3, 5, 3, 5, 4, 2, 1, 3, 4, 5, 0, 0, 2}, 
            {3, 1, 0, 5}, 
            {1, 2, 0, 1, 5, 2, 0, 5, 4}, 
            {5, 3, 3, 1, 5, 1, 3, 1, 0, 1, 5, 0, 4, 3, 2, 3, 4}, 
            {2, 5, 4}, 
            {2}, 
            {5}, 
            {2, 0, 1, 3, 4, 1, 1, 3, 1, 5, 2, 0}, 
            {3, 3, 2, 5, 0, 5, 2, 2}, 
            {2, 4, 2, 2, 2, 2, 3, 5, 2, 2, 0, 1, 2}, 
            {3, 4, 3, 5, 5, 1, 4, 4, 0}, 
            {5, 2, 1, 4, 3, 5}, 
            {5, 4, 3, 4, 2, 2}, 
            {4, 0, 1, 0, 5, 5, 0, 5, 0, 5, 0, 4, 0, 2, 5, 0}, 
            {1, 0, 2, 5, 1, 3, 4, 0, 3, 1, 2}, 
            {4, 0}, 
            {5, 5, 0, 1, 1, 2, 2, 2, 4, 3}, 
            {1}, 
            {4, 5, 5, 4, 5, 0, 1, 5, 2, 4, 3, 5, 1, 0}, 
            {2, 0, 4, 1, 0}, 
            {2, 5}, 
            {4, 2, 0, 3, 0, 1, 2, 2, 2, 2, 4, 0}, 
            {4, 0, 0, 3, 3, 2, 1, 3, 3, 5, 2, 0, 4, 0, 2, 2, 2, 4, 1, 5}, 
            {4}, 
            {3, 0, 3, 4, 1, 0, 5, 0, 0, 5, 5, 2, 2, 5, 5, 0, 0, 4, 1}};
}
